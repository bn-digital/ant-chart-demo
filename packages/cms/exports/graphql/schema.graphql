input FileInfoInput {
  name: String
  alternativeText: String
  caption: String
}

type UsersPermissionsMe {
  id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  id: ID!
  name: String!
  description: String
  type: String
}

input UsersPermissionsRegisterInput {
  username: String!
  email: String!
  password: String!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UserPermissionsPasswordPayload {
  ok: Boolean!
}

type ContactFormRequest {
  id: ID!
  email: String!
  subject: String
  name: String
  message: String
}

type ContactFormRequestConnection {
  values: [ContactFormRequest]
  groupBy: ContactFormRequestGroupBy
  aggregate: ContactFormRequestAggregator
}

type ContactFormRequestAggregator {
  count: Int
  totalCount: Int
}

type ContactFormRequestGroupBy {
  id: [ContactFormRequestConnectionId]
  email: [ContactFormRequestConnectionEmail]
  subject: [ContactFormRequestConnectionSubject]
  name: [ContactFormRequestConnectionName]
  message: [ContactFormRequestConnectionMessage]
}

type ContactFormRequestConnectionId {
  key: ID
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionEmail {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionSubject {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionName {
  key: String
  connection: ContactFormRequestConnection
}

type ContactFormRequestConnectionMessage {
  key: String
  connection: ContactFormRequestConnection
}

input ContactFormRequestInput {
  email: String!
  subject: String
  name: String
  message: String
  created_by: ID
  updated_by: ID
}

input editContactFormRequestInput {
  email: String
  subject: String
  name: String
  message: String
  created_by: ID
  updated_by: ID
}

input createContactFormRequestInput {
  data: ContactFormRequestInput
}

type createContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

input updateContactFormRequestInput {
  where: InputID
  data: editContactFormRequestInput
}

type updateContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

input deleteContactFormRequestInput {
  where: InputID
}

type deleteContactFormRequestPayload {
  contactFormRequest: ContactFormRequest
}

union WebsiteSectionsDynamicZone = ComponentOrganismsCallToAction | ComponentOrganismsHero | ComponentOrganismsArticle

"""Input type for dynamic zone sections of Website"""
scalar WebsiteSectionsDynamicZoneInput

type Website {
  id: ID!
  sections: [WebsiteSectionsDynamicZone]
  navigation: [ComponentMoleculesMenu]
  pages: [ComponentOrganismsPage]
  slides: [ComponentMoleculesSlider]
}

input WebsiteInput {
  sections: [WebsiteSectionsDynamicZoneInput!]
  navigation: [ComponentMoleculesMenuInput]
  pages: [ComponentOrganismsPageInput]
  slides: [ComponentMoleculesSliderInput]
  created_by: ID
  updated_by: ID
}

input editWebsiteInput {
  sections: [WebsiteSectionsDynamicZoneInput!]
  navigation: [editComponentMoleculesMenuInput]
  pages: [editComponentOrganismsPageInput]
  slides: [editComponentMoleculesSliderInput]
  created_by: ID
  updated_by: ID
}

input updateWebsiteInput {
  data: editWebsiteInput
}

type updateWebsitePayload {
  website: Website
}

type deleteWebsitePayload {
  website: Website
}

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

type UploadFileConnection {
  values: [UploadFile]
  groupBy: UploadFileGroupBy
  aggregate: UploadFileAggregator
}

type UploadFileAggregator {
  count: Int
  totalCount: Int
  sum: UploadFileAggregatorSum
  avg: UploadFileAggregatorAvg
  min: UploadFileAggregatorMin
  max: UploadFileAggregatorMax
}

type UploadFileAggregatorSum {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorAvg {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMin {
  width: Float
  height: Float
  size: Float
}

type UploadFileAggregatorMax {
  width: Float
  height: Float
  size: Float
}

type UploadFileGroupBy {
  id: [UploadFileConnectionId]
  created_at: [UploadFileConnectionCreated_at]
  updated_at: [UploadFileConnectionUpdated_at]
  name: [UploadFileConnectionName]
  alternativeText: [UploadFileConnectionAlternativeText]
  caption: [UploadFileConnectionCaption]
  width: [UploadFileConnectionWidth]
  height: [UploadFileConnectionHeight]
  formats: [UploadFileConnectionFormats]
  hash: [UploadFileConnectionHash]
  ext: [UploadFileConnectionExt]
  mime: [UploadFileConnectionMime]
  size: [UploadFileConnectionSize]
  url: [UploadFileConnectionUrl]
  previewUrl: [UploadFileConnectionPreviewUrl]
  provider: [UploadFileConnectionProvider]
  provider_metadata: [UploadFileConnectionProvider_metadata]
}

type UploadFileConnectionId {
  key: ID
  connection: UploadFileConnection
}

type UploadFileConnectionCreated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionUpdated_at {
  key: DateTime
  connection: UploadFileConnection
}

type UploadFileConnectionName {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionAlternativeText {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionCaption {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionWidth {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionHeight {
  key: Int
  connection: UploadFileConnection
}

type UploadFileConnectionFormats {
  key: JSON
  connection: UploadFileConnection
}

type UploadFileConnectionHash {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionExt {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionMime {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionSize {
  key: Float
  connection: UploadFileConnection
}

type UploadFileConnectionUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionPreviewUrl {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider {
  key: String
  connection: UploadFileConnection
}

type UploadFileConnectionProvider_metadata {
  key: JSON
  connection: UploadFileConnection
}

input FileInput {
  name: String!
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String!
  ext: String
  mime: String!
  size: Float!
  url: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input editFileInput {
  name: String
  alternativeText: String
  caption: String
  width: Int
  height: Int
  formats: JSON
  hash: String
  ext: String
  mime: String
  size: Float
  url: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  related: [ID]
  created_by: ID
  updated_by: ID
}

input deleteFileInput {
  where: InputID
}

type deleteFilePayload {
  file: UploadFile
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsRoleConnection {
  values: [UsersPermissionsRole]
  groupBy: UsersPermissionsRoleGroupBy
  aggregate: UsersPermissionsRoleAggregator
}

type UsersPermissionsRoleAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsRoleGroupBy {
  id: [UsersPermissionsRoleConnectionId]
  name: [UsersPermissionsRoleConnectionName]
  description: [UsersPermissionsRoleConnectionDescription]
  type: [UsersPermissionsRoleConnectionType]
}

type UsersPermissionsRoleConnectionId {
  key: ID
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionName {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionDescription {
  key: String
  connection: UsersPermissionsRoleConnection
}

type UsersPermissionsRoleConnectionType {
  key: String
  connection: UsersPermissionsRoleConnection
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
  created_by: ID
  updated_by: ID
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

type UsersPermissionsUser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  username: String!
  email: String!
  role: UsersPermissionsRole
  firstName: String!
  lastName: String!
}

type UsersPermissionsUserConnection {
  values: [UsersPermissionsUser]
  groupBy: UsersPermissionsUserGroupBy
  aggregate: UsersPermissionsUserAggregator
}

type UsersPermissionsUserAggregator {
  count: Int
  totalCount: Int
}

type UsersPermissionsUserGroupBy {
  id: [UsersPermissionsUserConnectionId]
  created_at: [UsersPermissionsUserConnectionCreated_at]
  updated_at: [UsersPermissionsUserConnectionUpdated_at]
  username: [UsersPermissionsUserConnectionUsername]
  email: [UsersPermissionsUserConnectionEmail]
  role: [UsersPermissionsUserConnectionRole]
  firstName: [UsersPermissionsUserConnectionFirstName]
  lastName: [UsersPermissionsUserConnectionLastName]
}

type UsersPermissionsUserConnectionId {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionCreated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUpdated_at {
  key: DateTime
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionUsername {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionEmail {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionRole {
  key: ID
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionFirstName {
  key: String
  connection: UsersPermissionsUserConnection
}

type UsersPermissionsUserConnectionLastName {
  key: String
  connection: UsersPermissionsUserConnection
}

input UserInput {
  username: String!
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  email: String!
  provider: String
  blocked: Boolean
  role: ID
  firstName: String!
  lastName: String!
  created_by: ID
  updated_by: ID
}

input editUserInput {
  username: String
  password: String
  resetPasswordToken: String
  confirmationToken: String
  confirmed: Boolean
  email: String
  provider: String
  blocked: Boolean
  role: ID
  firstName: String
  lastName: String
  created_by: ID
  updated_by: ID
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

type ComponentAtomsAddress {
  id: ID!
  lines: [ComponentAtomsText]
  type: ComponentAtomsType
}

input ComponentAtomsAddressInput {
  lines: [ComponentAtomsTextInput]
  type: ComponentAtomsTypeInput!
}

input editComponentAtomsAddressInput {
  id: ID
  lines: [editComponentAtomsTextInput]
  type: editComponentAtomsTypeInput
}

type ComponentAtomsButton {
  id: ID!
  title: String!
  url: String
}

input ComponentAtomsButtonInput {
  title: String!
  url: String
}

input editComponentAtomsButtonInput {
  id: ID
  title: String
  url: String
}

type ComponentAtomsEmail {
  id: ID!
  address: String!
  type: ComponentAtomsType
}

input ComponentAtomsEmailInput {
  address: String!
  type: ComponentAtomsTypeInput!
}

input editComponentAtomsEmailInput {
  id: ID
  address: String
  type: editComponentAtomsTypeInput
}

"""Key-Value entry"""
type ComponentAtomsEntry {
  id: ID!
  key: String!
  value: String
}

input ComponentAtomsEntryInput {
  key: String!
  value: String
}

input editComponentAtomsEntryInput {
  id: ID
  key: String
  value: String
}

type ComponentAtomsImage {
  id: ID!
  image: UploadFile
  background: String
}

input ComponentAtomsImageInput {
  image: ID
  background: String
}

input editComponentAtomsImageInput {
  id: ID
  image: ID
  background: String
}

type ComponentAtomsLink {
  id: ID!
  title: String!
  url: String
  icon: [ComponentAtomsImage]
}

input ComponentAtomsLinkInput {
  title: String!
  url: String
  icon: [ComponentAtomsImageInput]
}

input editComponentAtomsLinkInput {
  id: ID
  title: String
  url: String
  icon: [editComponentAtomsImageInput]
}

type ComponentAtomsMarkdown {
  id: ID!
  value: String
  properties: JSON
}

input ComponentAtomsMarkdownInput {
  value: String
  properties: JSON
}

input editComponentAtomsMarkdownInput {
  id: ID
  value: String
  properties: JSON
}

type ComponentAtomsMedia {
  id: ID!
  properties: JSON
  media(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
}

input ComponentAtomsMediaInput {
  media: [ID]
  properties: JSON
}

input editComponentAtomsMediaInput {
  id: ID
  media: [ID]
  properties: JSON
}

type ComponentAtomsNumeric {
  id: ID!
  value: Float!
  unit: String
}

input ComponentAtomsNumericInput {
  value: Float!
  unit: String
}

input editComponentAtomsNumericInput {
  id: ID
  value: Float
  unit: String
}

type ComponentAtomsParagraph {
  id: ID!
  children: [ComponentAtomsText]
}

input ComponentAtomsParagraphInput {
  children: [ComponentAtomsTextInput]
}

input editComponentAtomsParagraphInput {
  id: ID
  children: [editComponentAtomsTextInput]
}

type ComponentAtomsPhone {
  id: ID!
  number: String!
  type: ComponentAtomsType
}

input ComponentAtomsPhoneInput {
  number: String!
  type: ComponentAtomsTypeInput!
}

input editComponentAtomsPhoneInput {
  id: ID
  number: String
  type: editComponentAtomsTypeInput
}

"""Text node"""
type ComponentAtomsText {
  id: ID!
  value: String!
  properties: JSON
}

input ComponentAtomsTextInput {
  value: String!
  properties: JSON
}

input editComponentAtomsTextInput {
  id: ID
  value: String
  properties: JSON
}

enum ContactType {
  BusinessEmail
  PersonalEmail
  ContactEmail
  CareersEmail
  BusinessAddress
  PersonalAddress
  MobilePhone
  PersonalPhone
  BusinessPhone
}

type ComponentAtomsType {
  id: ID!
  contact: ContactType
}

input ComponentAtomsTypeInput {
  contact: ContactType
}

input editComponentAtomsTypeInput {
  id: ID
  contact: ContactType
}

type ComponentAtomsValue {
  id: ID!
  value: String!
  type: ComponentAtomsType
}

input ComponentAtomsValueInput {
  value: String!
  type: ComponentAtomsTypeInput
}

input editComponentAtomsValueInput {
  id: ID
  value: String
  type: editComponentAtomsTypeInput
}

type ComponentMoleculesCard {
  id: ID!
  title: String
  description: String
  image: ComponentAtomsImage
}

input ComponentMoleculesCardInput {
  title: String
  description: String
  image: ComponentAtomsImageInput
}

input editComponentMoleculesCardInput {
  id: ID
  title: String
  description: String
  image: editComponentAtomsImageInput
}

"""Collection<Entry>"""
type ComponentMoleculesMap {
  id: ID!
  children: [ComponentAtomsEntry]
}

input ComponentMoleculesMapInput {
  children: [ComponentAtomsEntryInput]
}

input editComponentMoleculesMapInput {
  id: ID
  children: [editComponentAtomsEntryInput]
}

type ComponentMoleculesMenu {
  id: ID!
  links: [ComponentAtomsLink]
  slug: String!
}

input ComponentMoleculesMenuInput {
  links: [ComponentAtomsLinkInput]
  slug: String!
}

input editComponentMoleculesMenuInput {
  id: ID
  links: [editComponentAtomsLinkInput]
  slug: String
}

type ComponentMoleculesSlider {
  id: ID!
  slides: [ComponentMoleculesCard]
  slug: String!
  hidden: Boolean
}

input ComponentMoleculesSliderInput {
  slides: [ComponentMoleculesCardInput]
  slug: String!
  hidden: Boolean
}

input editComponentMoleculesSliderInput {
  id: ID
  slides: [editComponentMoleculesCardInput]
  slug: String
  hidden: Boolean
}

type ComponentOrganismsArticle {
  id: ID!
  parent: ComponentOrganismsSection
}

input ComponentOrganismsArticleInput {
  parent: ComponentOrganismsSectionInput
}

input editComponentOrganismsArticleInput {
  id: ID
  parent: editComponentOrganismsSectionInput
}

type ComponentOrganismsCallToAction {
  id: ID!
  parent: ComponentOrganismsSection
  button: ComponentAtomsButton
}

input ComponentOrganismsCallToActionInput {
  parent: ComponentOrganismsSectionInput!
  button: ComponentAtomsButtonInput!
}

input editComponentOrganismsCallToActionInput {
  id: ID
  parent: editComponentOrganismsSectionInput
  button: editComponentAtomsButtonInput
}

type ComponentOrganismsHero {
  id: ID!
  parent: ComponentOrganismsSection
  button: ComponentAtomsButton
  cover: [ComponentAtomsMedia]
}

input ComponentOrganismsHeroInput {
  parent: ComponentOrganismsSectionInput!
  button: ComponentAtomsButtonInput
  cover: [ComponentAtomsMediaInput!]
}

input editComponentOrganismsHeroInput {
  id: ID
  parent: editComponentOrganismsSectionInput
  button: editComponentAtomsButtonInput
  cover: [editComponentAtomsMediaInput]
}

type ComponentOrganismsMetric {
  id: ID!
  value: ComponentAtomsNumeric
  entry: ComponentAtomsEntry
}

input ComponentOrganismsMetricInput {
  value: ComponentAtomsNumericInput!
  entry: ComponentAtomsEntryInput!
}

input editComponentOrganismsMetricInput {
  id: ID
  value: editComponentAtomsNumericInput
  entry: editComponentAtomsEntryInput
}

type ComponentOrganismsPage {
  id: ID!
  meta: [ComponentAtomsEntry]
  hidden: Boolean
  slug: String!
}

input ComponentOrganismsPageInput {
  meta: [ComponentAtomsEntryInput]
  hidden: Boolean
  slug: String!
}

input editComponentOrganismsPageInput {
  id: ID
  meta: [editComponentAtomsEntryInput]
  hidden: Boolean
  slug: String
}

type ComponentOrganismsSection {
  id: ID!
  title: String
  subTitle: String
  description: String
  hidden: Boolean
  slug: String!
}

input ComponentOrganismsSectionInput {
  title: String
  subTitle: String
  description: String
  hidden: Boolean
  slug: String!
}

input editComponentOrganismsSectionInput {
  id: ID
  title: String
  subTitle: String
  description: String
  hidden: Boolean
  slug: String
}

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | UsersPermissionsLoginPayload | UserPermissionsPasswordPayload | ContactFormRequest | ContactFormRequestConnection | ContactFormRequestAggregator | ContactFormRequestGroupBy | ContactFormRequestConnectionId | ContactFormRequestConnectionEmail | ContactFormRequestConnectionSubject | ContactFormRequestConnectionName | ContactFormRequestConnectionMessage | createContactFormRequestPayload | updateContactFormRequestPayload | deleteContactFormRequestPayload | Website | updateWebsitePayload | deleteWebsitePayload | UploadFile | UploadFileConnection | UploadFileAggregator | UploadFileAggregatorSum | UploadFileAggregatorAvg | UploadFileAggregatorMin | UploadFileAggregatorMax | UploadFileGroupBy | UploadFileConnectionId | UploadFileConnectionCreated_at | UploadFileConnectionUpdated_at | UploadFileConnectionName | UploadFileConnectionAlternativeText | UploadFileConnectionCaption | UploadFileConnectionWidth | UploadFileConnectionHeight | UploadFileConnectionFormats | UploadFileConnectionHash | UploadFileConnectionExt | UploadFileConnectionMime | UploadFileConnectionSize | UploadFileConnectionUrl | UploadFileConnectionPreviewUrl | UploadFileConnectionProvider | UploadFileConnectionProvider_metadata | deleteFilePayload | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsRoleConnection | UsersPermissionsRoleAggregator | UsersPermissionsRoleGroupBy | UsersPermissionsRoleConnectionId | UsersPermissionsRoleConnectionName | UsersPermissionsRoleConnectionDescription | UsersPermissionsRoleConnectionType | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | UsersPermissionsUserConnection | UsersPermissionsUserAggregator | UsersPermissionsUserGroupBy | UsersPermissionsUserConnectionId | UsersPermissionsUserConnectionCreated_at | UsersPermissionsUserConnectionUpdated_at | UsersPermissionsUserConnectionUsername | UsersPermissionsUserConnectionEmail | UsersPermissionsUserConnectionRole | UsersPermissionsUserConnectionFirstName | UsersPermissionsUserConnectionLastName | createUserPayload | updateUserPayload | deleteUserPayload | ComponentAtomsAddress | ComponentAtomsButton | ComponentAtomsEmail | ComponentAtomsEntry | ComponentAtomsImage | ComponentAtomsLink | ComponentAtomsMarkdown | ComponentAtomsMedia | ComponentAtomsNumeric | ComponentAtomsParagraph | ComponentAtomsPhone | ComponentAtomsText | ComponentAtomsType | ComponentAtomsValue | ComponentMoleculesCard | ComponentMoleculesMap | ComponentMoleculesMenu | ComponentMoleculesSlider | ComponentOrganismsArticle | ComponentOrganismsCallToAction | ComponentOrganismsHero | ComponentOrganismsMetric | ComponentOrganismsPage | ComponentOrganismsSection

input InputID {
  id: ID!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type AdminUser {
  id: ID!
  username: String
  firstname: String!
  lastname: String!
}

type Query {
  contactFormRequest(id: ID!, publicationState: PublicationState): ContactFormRequest
  contactFormRequests(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [ContactFormRequest]
  contactFormRequestsConnection(sort: String, limit: Int, start: Int, where: JSON): ContactFormRequestConnection
  website(publicationState: PublicationState): Website
  files(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UploadFile]
  filesConnection(sort: String, limit: Int, start: Int, where: JSON): UploadFileConnection
  role(id: ID!, publicationState: PublicationState): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsRole]
  rolesConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsRoleConnection
  user(id: ID!, publicationState: PublicationState): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON, publicationState: PublicationState): [UsersPermissionsUser]
  usersConnection(sort: String, limit: Int, start: Int, where: JSON): UsersPermissionsUserConnection
  me: UsersPermissionsMe
}

type Mutation {
  createContactFormRequest(input: createContactFormRequestInput): createContactFormRequestPayload
  updateContactFormRequest(input: updateContactFormRequestInput): updateContactFormRequestPayload
  deleteContactFormRequest(input: deleteContactFormRequestInput): deleteContactFormRequestPayload
  updateWebsite(input: updateWebsiteInput): updateWebsitePayload
  deleteWebsite: deleteWebsitePayload

  """Delete one file"""
  deleteFile(input: deleteFileInput): deleteFilePayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, field: String, source: String, info: FileInfoInput, file: Upload!): UploadFile!
  multipleUpload(refId: ID, ref: String, field: String, source: String, files: [Upload]!): [UploadFile]!
  updateFileInfo(id: ID!, info: FileInfoInput!): UploadFile!
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  forgotPassword(email: String!): UserPermissionsPasswordPayload
  resetPassword(password: String!, passwordConfirmation: String!, code: String!): UsersPermissionsLoginPayload
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""A time string with format: HH:mm:ss.SSS"""
scalar Time

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

"""The `Upload` scalar type represents a file upload."""
scalar Upload
